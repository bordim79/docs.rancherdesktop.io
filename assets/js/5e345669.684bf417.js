"use strict";(self.webpackChunkdocs_rancherdesktop_io=self.webpackChunkdocs_rancherdesktop_io||[]).push([[66390],{14103:function(e,n,o){o.r(n),o.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return r},metadata:function(){return a},toc:function(){return c}});var s=o(85893),t=o(11151);const r={title:"Transfer Container Images"},i=void 0,a={id:"how-to-guides/transfer-container-images",title:"Transfer Container Images",description:"Rancher Desktop provides dockerd and containerd as container engine options to manage containers. There are occasions when you might want to transfer the images from one container engine environment to the other. Or you may have migrated to Rancher Desktop from a different container management application and might want to bring the local images from the previous application environment to the Rancher Desktop environment.  This guide provides steps to transfer images using the save and load commands.",source:"@site/versioned_docs/version-latest/how-to-guides/transfer-container-images.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/transfer-container-images",permalink:"/how-to-guides/transfer-container-images",draft:!1,unlisted:!1,editUrl:"https://github.com/rancher-sandbox/docs.rancherdesktop.io/edit/main/versioned_docs/version-latest/how-to-guides/transfer-container-images.md",tags:[],version:"latest",frontMatter:{title:"Transfer Container Images"},sidebar:"tutorialSidebar",previous:{title:"Installing and Uninstalling Rancher Desktop Extensions",permalink:"/how-to-guides/installing-uninstalling-extensions"},next:{title:"Create a Multi-Node Cluster with k3d",permalink:"/how-to-guides/create-multi-node-cluster"}},l={},c=[{value:"Steps",id:"steps",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Head:o,TabItem:r,Tabs:i}=n;return o||m("Head",!0),r||m("TabItem",!0),i||m("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o,{children:(0,s.jsx)("link",{rel:"canonical",href:"https://docs.rancherdesktop.io/how-to-guides/transfer-container-images"})}),"\n",(0,s.jsxs)(n.p,{children:["Rancher Desktop provides ",(0,s.jsx)(n.code,{children:"dockerd"})," and ",(0,s.jsx)(n.code,{children:"containerd"})," as container engine options to manage containers. There are occasions when you might want to transfer the images from one container engine environment to the other. Or you may have migrated to Rancher Desktop from a different container management application and might want to bring the local images from the previous application environment to the Rancher Desktop environment.  This guide provides steps to transfer images using the ",(0,s.jsx)(n.code,{children:"save"})," and ",(0,s.jsx)(n.code,{children:"load"})," commands."]}),"\n",(0,s.jsx)(n.h3,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Save image(s) from the source environment to a tar archive."})}),"\n",(0,s.jsxs)(i,{groupId:"container-runtime",children:[(0,s.jsxs)(r,{value:"nerdctl",default:!0,children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save a single image"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nerdctl save -o local-image.tar image:tag\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save multiple images"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nerdctl save -o local-images.tar image1:tag1 image2:tag2\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save all images in a namespace"}),"\n"]}),(0,s.jsxs)(n.p,{children:["Below two commands use ",(0,s.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:"jq"})," for JSON parsing. The long command performs the below steps:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"nerdctl -n k8s.io image ls"})," sub command gets the list of all images present in the ",(0,s.jsx)(n.code,{children:"k8s.io"})," namespace, hence doesn't include images from any other namespace, ",(0,s.jsx)(n.code,{children:"default"})," for instance."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"jq"})," sub command filters and formats the images list from the previous step.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:'select(.Repository!=\\"<none>\\")'})," part of the command skips those images with repository having a value of ",(0,s.jsx)(n.code,{children:"<none>"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:'if (.Tag=="<none>") then .Repository else (.Repository+":"+.Tag) end\')'})," part of the command formats the name of the images to be just the ",(0,s.jsx)(n.code,{children:"<Repository>"})," or ",(0,s.jsx)(n.code,{children:"<Repository>:<Tag>"})," depending on whether a image tag has a value of ",(0,s.jsx)(n.code,{children:"<none>"})," or not."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Finally the ",(0,s.jsx)(n.code,{children:"nerdctl -n k8s.io save -o all-local-images-in-namespace.tar"})," part of the command saves the filtered and formatted images list from the previous two steps into a tar file."]}),"\n"]}),(0,s.jsxs)(i,{groupId:"shell",children:[(0,s.jsx)(r,{value:"Bash",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format \'{{json .}}\' | jq -r \'select(.Repository!="<none>") | if (.Tag=="<none>") then .Repository else (.Repository+":"+.Tag) end\')\n'})})}),(0,s.jsx)(r,{value:"PowerShell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format \'{{json .}}\' | jq -r \'select(.Repository!=\\"<none>\\") | if (.Tag==\\"<none>\\") then .Repository else (.Repository+\\":\\"+.Tag) end\')\n'})})})]})]}),(0,s.jsxs)(r,{value:"docker",children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save a single image"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker save -o local-image.tar image:tag\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save multiple images"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker save -o local-images.tar image1:tag1 image2:tag2\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save all local images"}),"\n"]}),(0,s.jsxs)(n.p,{children:["Below two commands use ",(0,s.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:"jq"})," for JSON parsing. The long command performs the below steps:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"docker image ls"})," sub command gets the list of all local images."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"jq"})," sub command filters and formats the images list from the previous step.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:'select(.Repository!=\\"<none>\\")'})," part of the command skips those images with repository having a value of ",(0,s.jsx)(n.code,{children:"<none>"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:'if (.Tag=="<none>") then .Repository else (.Repository+":"+.Tag) end\')'})," part of the command formats the name of the images to be just the ",(0,s.jsx)(n.code,{children:"<Repository>"})," or ",(0,s.jsx)(n.code,{children:"<Repository>:<Tag>"})," depending on whether a image tag has a value of ",(0,s.jsx)(n.code,{children:"<none>"})," or not."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Finally the ",(0,s.jsx)(n.code,{children:"docker save -o all-local-images-in-namespace.tar"})," part of the command saves the filtered and formatted images list from the previous two steps into a tar file."]}),"\n"]}),(0,s.jsxs)(i,{groupId:"shell",children:[(0,s.jsx)(r,{value:"Bash",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'docker save -o all-local-images-in-namespace.tar $(docker image ls --format \'{{json .}}\' | jq -r \'select(.Repository!="<none>") | if (.Tag=="<none>") then .Repository else (.Repository+":"+.Tag) end\')\n'})})}),(0,s.jsx)(r,{value:"PowerShell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'docker save -o all-local-images-in-namespace.tar $(docker image ls --format \'{{json .}}\' | jq -r \'select(.Repository!=\\"<none>\\") | if (.Tag==\\"<none>\\") then .Repository else (.Repository+\\":\\"+.Tag) end\')\n'})})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. Load images from the saved tar archive in the target environment."})}),"\n",(0,s.jsxs)(i,{groupId:"container-runtime",children:[(0,s.jsx)(r,{value:"nerdctl",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nerdctl load < local-images.tar\n"})})}),(0,s.jsx)(r,{value:"docker",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker load < local-images.tar\n"})})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:function(e,n,o){o.d(n,{Z:function(){return a},a:function(){return i}});var s=o(67294);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);