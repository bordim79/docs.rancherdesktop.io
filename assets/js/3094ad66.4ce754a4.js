"use strict";(self.webpackChunkdocs_rancherdesktop_io=self.webpackChunkdocs_rancherdesktop_io||[]).push([[9261],{51257:function(e,n,i){i.r(n),i.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return r},metadata:function(){return a},toc:function(){return c}});var s=i(85893),t=i(11151);const r={title:"Working with WebAssembly"},o=void 0,a={id:"tutorials/working-with-webassembly",title:"Working with WebAssembly",description:"Rancher Desktop 1.13.0 added experimental support for running WebAssembly (WASM) applications. This feature needs to be enabled in  Preferences > Container Engine > General.",source:"@site/versioned_docs/version-1.13/tutorials/working-with-webassembly.md",sourceDirName:"tutorials",slug:"/tutorials/working-with-webassembly",permalink:"/1.13/tutorials/working-with-webassembly",draft:!1,unlisted:!1,editUrl:"https://github.com/rancher-sandbox/docs.rancherdesktop.io/edit/main/versioned_docs/version-1.13/tutorials/working-with-webassembly.md",tags:[],version:"1.13",frontMatter:{title:"Working with WebAssembly"},sidebar:"tutorialSidebar",previous:{title:"Working with Containers",permalink:"/1.13/tutorials/working-with-containers"},next:{title:"Using Persistent Storage",permalink:"/1.13/tutorials/using-persistent-storage"}},l={},c=[{value:"Managing containerd WASM shims",id:"managing-containerd-wasm-shims",level:2},{value:"Running WASM apps with the container engine",id:"running-wasm-apps-with-the-container-engine",level:2},{value:"Running WASM apps with Kubernetes",id:"running-wasm-apps-with-kubernetes",level:2},{value:"Ingress IP on Windows",id:"ingress-ip-on-windows",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components},{Head:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i,{children:(0,s.jsx)("link",{rel:"canonical",href:"https://docs.rancherdesktop.io/tutorials/working-with-webassembly"})}),"\n",(0,s.jsxs)(n.p,{children:["Rancher Desktop 1.13.0 added experimental support for running WebAssembly (WASM) applications. This feature needs to be enabled in  ",(0,s.jsx)(n.a,{href:"/1.13/ui/preferences/container-engine/general",children:"Preferences > Container Engine > General"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"warning",type:"caution",children:(0,s.jsxs)(n.p,{children:["Note that when using the ",(0,s.jsx)(n.code,{children:"moby"})," container engine, enabling the WASM feature switches to a different image store, so previously built or downloaded images will not be available and must be built or downloaded again. The images are not lost; Rancher Desktop will switch back to the old image store when WASM is disabled again."]})}),"\n",(0,s.jsx)(n.h2,{id:"managing-containerd-wasm-shims",children:"Managing containerd WASM shims"}),"\n",(0,s.jsx)(n.p,{children:'Running WebAssembly applications on a container runtime requires a specific containerd "shim" for each WASM runtime/framework used.'}),"\n",(0,s.jsxs)(n.p,{children:["Rancher Desktop 1.13 comes bundled with the ",(0,s.jsx)(n.code,{children:"containerd-spin-shim-v2"})," shim preinstalled. Future releases are expected to download additional shims automatically when the feature is enabled."]}),"\n",(0,s.jsxs)(n.p,{children:["For now additional shims can be installed by the user into the ",(0,s.jsx)(n.code,{children:"containerd-shims"})," cache directory on the host. The location is"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Linux: ",(0,s.jsx)(n.code,{children:"~/.local/share/rancher-desktop/containerd-shims"})]}),"\n",(0,s.jsxs)(n.li,{children:["macOS: ",(0,s.jsx)(n.code,{children:"~/Library/Application Support/rancher-desktop/containerd-shims"})]}),"\n",(0,s.jsxs)(n.li,{children:["Windows: ",(0,s.jsx)(n.code,{children:"%LOCALAPPDATA%\\rancher-desktop\\containerd-shims"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Any shim installed there will automatically be copied into the VM and configured for the container engine when Rancher Desktop is started (installing a newer version of the ",(0,s.jsx)(n.code,{children:"spin"})," shim will override the bundled version)."]}),"\n",(0,s.jsx)(n.h2,{id:"running-wasm-apps-with-the-container-engine",children:"Running WASM apps with the container engine"}),"\n",(0,s.jsxs)(n.p,{children:["Running WebAssembly applications directly is currently only supported with the ",(0,s.jsx)(n.code,{children:"moby"})," container engine; there is a bug in ",(0,s.jsx)(n.code,{children:"nerdctl"})," that prevents it from working with ",(0,s.jsx)(n.code,{children:"containerd"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The following command runs the ",(0,s.jsx)(n.code,{children:"spin-rust-hello"})," sample ",(0,s.jsx)(n.code,{children:"spin"})," application on the ",(0,s.jsx)(n.code,{children:"moby"})," engine (note the final ",(0,s.jsx)(n.code,{children:"/"})," on the last line; it is the command to run, and ",(0,s.jsx)(n.code,{children:"docker run"})," will fail if it is omitted):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker run \\\n    --detach \\\n    --name spin-demo \\\n    --runtime io.containerd.spin.v2 \\\n    --platform wasi/wasm \\\n    --publish 8080:80 \\\n    ghcr.io/deislabs/containerd-wasm-shims/examples/spin-rust-hello:v0.11.1 \\\n    /\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The internal port ",(0,s.jsx)(n.code,{children:"80"})," has been mapped to ",(0,s.jsx)(n.code,{children:"8080"})," and can be tested from the host:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ curl http:////localhost:8080/hello\nHello world from Spin!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"running-wasm-apps-with-kubernetes",children:"Running WASM apps with Kubernetes"}),"\n",(0,s.jsxs)(n.p,{children:["Running WebAssembly applications on Kubernetes is currently only supported with the ",(0,s.jsx)(n.code,{children:"containerd"})," runtime; it doesn't work with the ",(0,s.jsx)(n.code,{children:"cri-dockerd"})," shim used to run Kubernetes on top of ",(0,s.jsx)(n.code,{children:"moby"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Create a deployment for the ",(0,s.jsx)(n.code,{children:"spin-rust-hello"})," sample app:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:'kubectl apply --filename - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-spin\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-spin\n  template:\n    metadata:\n      labels:\n        app: hello-spin\n    spec:\n      runtimeClassName: spin\n      containers:\n      - name: hello-spin\n        image: ghcr.io/deislabs/containerd-wasm-shims/examples/spin-rust-hello:v0.11.1\n        command: ["/"]\nEOF\n'})}),"\n",(0,s.jsx)(n.p,{children:"It should print"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"deployment.apps/hello-spin created\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then create a ClusterIP service and a Traefik ingress contoller:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"kubectl apply --filename - <<EOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-spin\nspec:\n  type: ClusterIP\n  selector:\n    app: hello-spin\n  ports:\n  - port: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-spin\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web\nspec:\n  rules:\n  - host: localhost\n    http:\n      paths:\n        - path: /\n          pathType: Prefix\n          backend:\n            service:\n              name: hello-spin\n              port:\n                number: 80\nEOF\n"})}),"\n",(0,s.jsx)(n.p,{children:"Which will print"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"service/hello-spin created\ningress.networking.k8s.io/hello-spin created\n"})}),"\n",(0,s.jsx)(n.p,{children:"Testing it from the host:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ curl http://localhost/hello\nHello world from Spin!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ingress-ip-on-windows",children:"Ingress IP on Windows"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["On Windows using ",(0,s.jsx)(n.code,{children:"localhost"})," for the Traefik ingress will not work."]})}),"\n",(0,s.jsx)(n.p,{children:"Instead the ingress IP address should be determined from the Traefik loadbalancer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'C:\\>kubectl get service traefik --namespace kube-system --output "jsonpath={.status.loadBalancer.ingress[0].ip}"\n192.168.127.2\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sslip.io"}),' "magic" DNS service can be used to create a corresponding DNS name for it: ',(0,s.jsx)(n.code,{children:"192.168.127.2.sslip.io"}),". This name should be used instead of ",(0,s.jsx)(n.code,{children:"localhost"})," in the Ingress spec ",(0,s.jsx)(n.code,{children:"host"})," field."]}),"\n",(0,s.jsx)(n.p,{children:"After deploying the deployment, service, and ingress the app should be available under this domain name:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"C:\\>curl http://192.168.127.2.sslip.io/hello\nHello world from Spin!\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:function(e,n,i){i.d(n,{Z:function(){return a},a:function(){return o}});var s=i(67294);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);